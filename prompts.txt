My project structure is as follows:

./app/main.py
./app/static/js/demo_data.json
./app/static/js/plotly_demo.js
./app/templates/index.html
./app/utils/simple.py
./Dockerfile
./k8s/deployment.yaml
./k8s/service.yaml
./LICENSE
./README.md
./requirements.txt
./structure.txt
./_deprecated/refactored.py
./_do-this-later/Dockerfile


The project shall run and be able to be reached on a linode kubernetes cluster.

The ./app/refactored.py generates successfully the html page ./data/weather_plot.html

My docker configuration is impulsleistung/weather-app:latest

Help me with the steps:
- the refactored.py shall run on a nginx server
- write the dockerfile
- The docker image should always be built and pushed to the docker repo.
- When the container is in the dockerhub repo it should be deployed in my remote kubernetes cluster on linode.
- Write the deployment-, service- and cronjob yaml file and provide all steps for CI /CD.
- The app shall be deployed and then the serivce shall be exposed, that's why I use a deployment.yaml and a serivce.yaml
- For a more resilient and Kubernetes-native approach to executing periodic tasks, like running this Python script every minute, I might consider using a Kubernetes cronjob yaml. This approach leverages Kubernetes' built-in job scheduler, which is designed to run tasks at specified intervals.

Finally deploy and expose the app.

If there is a better architecture or approach to achieve that, then feel free to suggest it. Use the best practices available.




find -type d -name .git -prune -o -type f -print > structure.txt



write a fasiAPI: Every time when the fasiAPI gets called: a simple Plotly.js application with demo data shall be shown.
give the project file structure of this project. Also provide the steps to test it on my windows computer.

╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────────────────╮
│   prompt      [PROMPT]  The prompt to generate completions for.                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────╮
│ --model            TEXT                       Large language model to use. [default: gpt-4-1106-preview] │
│ --temperature      FLOAT RANGE [0.0<=x<=2.0]  Randomness of generated output. [default: 0.0]             │
│ --top-p            FLOAT RANGE [0.0<=x<=1.0]  Limits highest probable tokens (words). [default: 1.0]     │
│ --md             --no-md                      Prettify markdown output. [default: md]                    │
│ --editor                                      Open $EDITOR to provide a prompt. [default: no-editor]     │
│ --cache                                       Cache completion results. [default: cache]                 │
│ --version                                     Show version.                                              │
│ --help                                        Show this message and exit.                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Assistance Options ─────────────────────────────────────────────────────────────────────────────────────╮
│ --shell           -s                      Generate and execute shell commands.                           │
│ --interaction         --no-interaction    Interactive mode for --shell option. [default: interaction]    │
│ --describe-shell  -d                      Describe a shell command.                                      │
│ --code            -c                      Generate only code.                                            │
│ --functions           --no-functions      Allow function calls. [default: functions]                     │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Chat Options ───────────────────────────────────────────────────────────────────────────────────────────╮
│ --chat                 TEXT  Follow conversation with id, use "temp" for quick session. [default: None]  │
│ --repl                 TEXT  Start a REPL (Read–eval–print loop) session. [default: None]                │
│ --show-chat            TEXT  Show all messages from provided chat id. [default: None]                    │
│ --list-chats  -lc            List all existing chat ids.                                                 │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Role Options ───────────────────────────────────────────────────────────────────────────────────────────╮
│ --role                  TEXT  System role for GPT model. [default: None]                                 │
│ --create-role           TEXT  Create role. [default: None]                                               │
│ --show-role             TEXT  Show role. [default: None]                                                 │
│ --list-roles   -lr            List roles.                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────╯