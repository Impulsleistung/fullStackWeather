My project structure is as follows:

./app/main.py
./app/static/js/demo_data.json
./app/static/js/plotly_demo.js
./app/templates/index.html
./app/utils/simple.py
./Dockerfile
./k8s/deployment.yaml
./k8s/service.yaml
./LICENSE
./README.md
./requirements.txt
./structure.txt
./_deprecated/refactored.py
./_do-this-later/Dockerfile


The project shall run and be able to be reached on a linode kubernetes cluster.

The ./app/refactored.py generates successfully the html page ./data/weather_plot.html

My docker configuration is impulsleistung/weather-app:latest

Help me with the steps:
- the refactored.py shall run on a nginx server
- write the dockerfile
- The docker image should always be built and pushed to the docker repo.
- When the container is in the dockerhub repo it should be deployed in my remote kubernetes cluster on linode.
- Write the deployment-, service- and cronjob yaml file and provide all steps for CI /CD.
- The app shall be deployed and then the serivce shall be exposed, that's why I use a deployment.yaml and a serivce.yaml
- For a more resilient and Kubernetes-native approach to executing periodic tasks, like running this Python script every minute, I might consider using a Kubernetes cronjob yaml. This approach leverages Kubernetes' built-in job scheduler, which is designed to run tasks at specified intervals.

Finally deploy and expose the app.

If there is a better architecture or approach to achieve that, then feel free to suggest it. Use the best practices available.




find -type d -name .git -prune -o -type f -print > structure.txt



write a fasiAPI: Every time when the fasiAPI gets called: a simple Plotly.js application with demo data shall be shown.
give the project file structure of this project. Also provide the steps to test it on my windows computer.